{"version":3,"sources":["components/header.js","components/search.js","components/table.js","utils/api.js","app.js","serviceWorker.js","index.js"],"names":["Header","className","href","id","Table","props","onSubmit","e","preventDefault","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","Search","src","picture","alt","city","phone","email","axios","get","App","state","result","event","target","setState","newResult","filter","employee","first","indexOf","last","length","API","then","res","data","results","catch","err","console","log","this","map","element","index","key","medium","location","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+OAceA,MAZf,WACI,OACI,6BACI,yBAAKC,UAAU,eACX,uBAAGC,KAAK,aAAaD,UAAU,qBAA/B,sBACA,wBAAIE,GAAG,aAAaF,UAAU,iCCiB/BG,MAtBf,SAAeC,GACX,OACI,yBAAKJ,UAAU,eACX,0BAAMK,SAAU,SAACC,GAAD,OAAKA,EAAEC,mBACnB,yBAAKP,UAAU,eACX,2BAAOA,UAAU,aAAaQ,QAAQ,UAAS,uBAAGR,UAAU,oBAC5D,2BACAS,SAAUL,EAAMM,kBAChBC,MAAOP,EAAMQ,OACbC,KAAK,SACLC,KAAK,OACLd,UAAU,eACVe,YAAY,yBACZb,GAAG,eCGRc,MAhBf,SAAgBZ,GACZ,OAEQ,+BACI,4BACI,4BAAKA,EAAMS,MACX,4BAAI,yBAAKI,IAAKb,EAAMc,QAASC,IAAI,MACjC,4BAAKf,EAAMgB,MACX,4BAAKhB,EAAMiB,OACX,4BAAKjB,EAAMkB,U,iBCRhB,EACN,WACL,OAAOC,IAAMC,IAJL,iDC6EGC,E,4MArEXC,MAAQ,CACNC,OAAQ,GACRf,OAAQ,I,EASVF,kBAAoB,SAAAkB,GAChB,IAAMjB,EAAQiB,EAAMC,OAAOlB,MACrBE,EAAOe,EAAMC,OAAOhB,KAC1B,EAAKiB,SAAL,eACGjB,EAAOF,IAIV,IAAIoB,EAAY,EAAKL,MAAMC,OAAOK,QAAO,SAAAC,GAEvC,OAAOA,EAASpB,KAAKqB,MAAMC,QAAQxB,IAAQ,GAAKsB,EAASpB,KAAKuB,KAAKD,QAAQxB,IAAQ,KAGrF,EAAKmB,SAAS,CACZH,OAAQI,IAGS,IAAfpB,EAAM0B,QACRC,IACCC,MAAK,SAAAC,GAAG,OAAI,EAAKV,SAAS,CAAEH,OAAQa,EAAIC,KAAKC,aAC7CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,kEA1BX,IAAD,OAChBN,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKV,SAAS,CAAEH,OAAQa,EAAIC,KAAKC,aAC7CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BA6B5B,OACI,yBAAK5C,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQW,MAAOoC,KAAKrB,MAAMd,OAC1BF,kBAAmBqC,KAAKrC,oBAExB,2BAAOV,UAAW,oBACd,+BACI,4BACI,oCACA,uCACA,oCACA,qCACA,uCAGP+C,KAAKrB,MAAMC,OAAOqB,KAAI,SAACC,EAASC,GAAV,OACvB,kBAAC,EAAD,CACIC,IAAKD,EACLrC,KAAMoC,EAAQpC,KAAKqB,MAAQ,IAAMe,EAAQpC,KAAKuB,KAC9ClB,QAAS+B,EAAQ/B,QAAQkC,OACzBhC,KAAM6B,EAAQI,SAASjC,KACvBE,MAAO2B,EAAQ3B,MACfD,MAAO4B,EAAQ5B,iB,GA9DrBiC,aCKEC,QACa,cAA7BC,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,2DCbRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.f7eb3b32.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <nav>\n            <div className=\"nav-wrapper\">\n                <a href=\"google.com\" className=\"brand-logo center\">Employee Directory</a>\n                <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\n                </ul>\n            </div>\n        </nav>\n      );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Table(props) {\n    return (\n        <div className=\"nav-content\">\n            <form onSubmit={(e)=>e.preventDefault()}>\n                <div className=\"input-field\">\n                    <label className=\"label-icon\" htmlFor=\"search\"><i className=\"material-icons\"></i></label>\n                    <input\n                    onChange={props.handleInputChange}\n                    value={props.search}\n                    name=\"search\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Search for an employee\"\n                    id=\"search\"\n                    />\n                </div>\n            </form>\n        </div>\n    );\n}\n        \n\nexport default Table;","import React from \"react\";\n\nfunction Search(props) {\n    return(\n        \n            <tbody>\n                <tr>\n                    <td>{props.name}</td>\n                    <td><img src={props.picture} alt=\"\"></img></td>\n                    <td>{props.city}</td>\n                    <td>{props.phone}</td>\n                    <td>{props.email}</td>\n                </tr>\n            </tbody>\n\n    );\n}\n\nexport default Search;","import axios from \"axios\";\nconst URL = \"https://randomuser.me/api/?results=50&nat=us\";\n\nexport default {\n  users: function() {\n    return axios.get(URL);\n  }\n};","import React, { Component } from \"react\";\nimport Header from \"./components/header\";\nimport Search from \"./components/search\";\nimport Table from \"./components/table\";\nimport API from \"./utils/api.js\";\n\n\nclass App extends Component {\n\n    state = {\n      result: [],\n      search: \"\"\n    };\n\n    componentDidMount() {\n        API.users()\n          .then(res => this.setState({ result: res.data.results }))\n          .catch(err => console.log(err));\n    };\n\n    handleInputChange = event => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({\n          [name]: value\n        });\n    \n        \n        let newResult = this.state.result.filter(employee =>{\n          // console.log(employee.name.first.toLowerCase().indexOf(this.state.search), employee.name,employee.name.last.toLowerCase().indexOf(this.state.search))\n          return employee.name.first.indexOf(value)>-1 || employee.name.last.indexOf(value)>-1\n        })\n        //this updates the existing result state\n        this.setState({\n          result: newResult\n        })\n        //conditional statement to load the original results once search length is at 0\n        if (value.length===0){\n          API.users()\n          .then(res => this.setState({ result: res.data.results }))\n          .catch(err => console.log(err));\n        }\n    \n    };\n\n    render () {\n        return (\n            <div className=\"container\">\n                <Header />\n                <Search value={this.state.search}\n                handleInputChange={this.handleInputChange}\n                />\n                <table className= \"striped bordered\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Picture</th>\n                            <th>City</th>\n                            <th>Phone</th>\n                            <th>Email</th>\n                        </tr>\n                    </thead>\n                    {this.state.result.map((element, index) => (\n                    <Table\n                        key={index}\n                        name={element.name.first + \" \" + element.name.last}\n                        picture={element.picture.medium}\n                        city={element.location.city}\n                        email={element.email}\n                        phone={element.phone}\n                        />\n                    ))}\n                </table>\n            </div>\n        );\n    };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}